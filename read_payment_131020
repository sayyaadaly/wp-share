<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">

		
<robotics-flow>
<robot driver="universal" name="driver" start-in-private="false" close-on-completion="true">
			<capability name ="SEARCH_ALL_WINDOWS" value="true"/>
			<capability name="CLOSE_ALL_WINDOWS" value="false"/>
		<script><![CDATA[
		
			//date
			import java.time.LocalDate;
			import java.time.LocalDateTime;
			import java.time.ZoneId;
			import java.time.format.DateTimeFormatter
			import java.util.*;
			import java.text.SimpleDateFormat;
			//apache excel
			import org.apache.poi.xssf.usermodel.*;
			import org.apache.poi.ss.usermodel.*;
			import org.apache.poi.hssf.usermodel.*;
			import java.text.SimpleDateFormat;
			import org.apache.poi.ss.usermodel.DateUtil
			import org.apache.poi.ss.usermodel.DataFormatter;
			
			 import java.io.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
import au.com.bytecode.opencsv.CSVReader;
			
			String processedDateListRaw = "10/7/2020"//processed_date_list;
			String[] processedDateList = processedDateListRaw.split("\\s+");
			
			//search in payment and pwd payment files
			
			Map columnRecordsHash = new LinkedHashMap();
			//JSONObject columnRecordsHash = new JSONObject();
			List recordList = new ArrayList();
		
			//Global Variable[export]
			String pwdStr 		 = "2020-10-06";
			String karanLocalStr = "2020-10-07";
			LocalDate pwd    = LocalDate.parse(pwdStr); 
			LocalDate karanLocal    = LocalDate.parse(karanLocalStr); 
			
			//path
			String open_folder_path = "C:\\Users\\rb-mu_robot_pcg_01\\Downloads\\"
			String payment_excel_path = open_folder_path+"payment.xlsx" //open
			String pwdPath = ""//pwdPathStr;
			String pwd_processed_excel_path = pwdPath+"processed_dated.xlsx"//daily
			
			//debit
			double debit_amount = 0.0;
			double reversal_amount = 0.0//reversalAmt;
			
			
			//CURRENT DAY PAYMENT FILE
			File processedExcel = new File(payment_excel_path); 
			FileInputStream fisi = new FileInputStream(processedExcel);
			XSSFWorkbook inputWorkbook = new XSSFWorkbook(fisi);
			XSSFSheet inputSheet = inputWorkbook.getSheetAt(0);
			
			//get last row
			int rowCount = inputSheet.getLastRowNum();
			Date receivedDate;
			double paymentAmount;
			int paymentCount;
			def receivedLocalDate;
			Row currentRow;
			
			for(int currentRowCount = 1; currentRowCount <= rowCount; currentRowCount++){
				currentRow = inputSheet.getRow(currentRowCount);
			
				if(currentRow.getCell(0) == null){
					//println("brokeman")
					break;
				}
				//received date of mail
				Cell receivedDateCell = currentRow.getCell(0)

				receivedLocalDate = getCellPlusPlus(receivedDateCell);
				println(getCellPlusPlus(receivedDateCell))
				//amount of transactions processed
				Cell paymentAmountCell = currentRow.getCell(3);
				println(getCellPlusPlus(paymentAmountCell))
				//count of error records 
				Cell paymentCountCell = currentRow.getCell(2);
				println(getCellPlusPlus(paymentCountCell))
				
				//calculate debit amount
				if(processedDateList.contains(receivedLocalDate.toString())){
					
					log.info("Matched")
					//paymentAmount = Double.parseDouble(paymentAmountStr);
					debit_amount += paymentAmount;
				}
				
			
			}
			fisi.close();	
			
			
			//PWD PAYMENT FILE
			File pwdProcessedExcel = new File(pwd_payment_excel_path); 
			FileInputStream fisi2 = new FileInputStream(pwdProcessedExcel);
			XSSFWorkbook inputWorkbook2 = new XSSFWorkbook(fisi2);
			XSSFSheet inputSheet2 = inputWorkbook2.getSheetAt(0);
			
			//get last row
			int rowCount2 = inputSheet2.getLastRowNum();
			Date receivedDate2;
			double paymentAmount2;
			int paymentCount2;
			int paymentCountStr2;
			LocalDate receivedLocalDate2;
			Row currentRow2;
			
			for(int currentRowCount2 = 1; currentRowCount2 <= rowCount2; currentRowCount2++){
				currentRow2 = inputSheet2.getRow(currentRowCount2);
			
				if(currentRow2.getCell(0) == null){
					//println("brokeman")
					break;
				}
				//received date of mail
				receivedDate2  = currentRow2.getCell(0).getDateCellValue();
				//println(receivedDate)
				receivedLocalDate2 = receivedDate2.toLocalDate();
				//println(receivedLocalDate.toString())
				//amount of transactions processed
				paymentAmount2 = currentRow2.getCell(3).getNumericCellValue();
				//count of error records 
				paymentCount2  = currentRow2.getCell(2).getNumericCellValue(); //check further if count NUEMRIC or STRING cell 
				
				//calculate debit amount
				if(processedDateList.contains(receivedLocalDate2.toString())){
					
					log.info("Matched")
					//paymentAmount2 = Double.parseDouble(paymentAmountStr2);
					debit_amount += paymentAmount2;
				}
				
			
			}
			fisi2.close();	
			
			debit_amount = debit_amount - reversal_amount;
			println(debit_amount)
			
			sys.defineVariable("debitAmt",debit_amount)
			
			
			
//check for cell type and get value with respect to
def getCellPlusPlus(Cell cell) {
	DataFormatter dataFormat = new DataFormatter();	
	switch (cell.getCellType())
	{

		case Cell.CELL_TYPE_NUMERIC:
			if(DateUtil.isCellDateFormatted(cell)){
				Date rs = cell.getDateCellValue();
				return convertToLocalDateViaInstant(rs);
			}else{
				def value = dataFormat.formatCellValue(cell);
				Double d2=Double.valueOf(value);//second way  
				return d2;
			}
			break;
		case Cell.CELL_TYPE_STRING:
			def value = dataFormat.formatCellValue(cell);
			Double d2=Double.valueOf(value);//second way  
			return d2;
			break;

	} 
	
	
}



public LocalDate convertToLocalDateViaInstant(Date dateToConvert) {
return dateToConvert.toInstant()
.atZone(ZoneId.systemDefault())
.toLocalDate();
}
			
		]]></script>
	
	</robot>
</robotics-flow>

<export include-original-data="true">
	 <single-column name="debitAmt" value="${debitAmt}"/>
</export>

</config>
